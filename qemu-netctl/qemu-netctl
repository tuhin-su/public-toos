#!/usr/bin/env bash
# qemu-netctl - Simple Virtual LAN & TAP Manager for QEMU
# Author: Tuhin SU
# Repo: https://github.com/tuhin-su/public-toos.git

# ========= COLORS =========
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
MAGENTA="\033[1;35m"
CYAN="\033[1;36m"
RESET="\033[0m"
BOLD="\033[1m"

# ========= GLOBAL VARS =========
NET_DIR="$HOME/.qemu-netctl/networks"
mkdir -p "$NET_DIR"

# Default uplink interface for internet (change if needed)
UPLINK_IF="wlan0"
VM_NET="10.200.0.0/24"

# ========= FUNCTIONS =========

banner() {
  echo -e "${CYAN}${BOLD}"
  echo "==============================================="
  echo "        QEMU Virtual LAN & TAP Manager"
  echo "==============================================="
  echo -e "${RESET}"
}

author_info() {
  echo -e "${YELLOW}${BOLD}Author:${RESET} Tuhin SU"
  echo -e "${YELLOW}${BOLD}GitHub:${RESET} ${BLUE}https://github.com/tuhin-su/public-toos.git${RESET}"
  echo
}

usage() {
  banner
  echo -e "${GREEN}Usage:${RESET} qemu-netctl <command> [options]"
  echo
  echo -e "${YELLOW}LAN Commands:${RESET}"
  echo -e "  ${CYAN}create <lan_name>${RESET}          Create a new virtual LAN (bridge)"
  echo -e "  ${CYAN}delete <lan_name>${RESET}          Delete a virtual LAN"
  echo -e "  ${CYAN}list${RESET}                      List all virtual LANs"
  echo -e "  ${CYAN}attach <lan_name> <tapX>${RESET}   Attach TAP device to LAN"
  echo -e "  ${CYAN}detach <lan_name> <tapX>${RESET}   Detach TAP device from LAN"
  echo -e "  ${CYAN}save <lan_name>${RESET}            Save LAN config with TAPs"
  echo -e "  ${CYAN}restore <lan_name>${RESET}         Restore LAN and TAPs from config"
  echo
  echo -e "${YELLOW}TAP Commands:${RESET}"
  echo -e "  ${CYAN}tap-create <tapX>${RESET}         Create a TAP interface"
  echo -e "  ${CYAN}tap-delete <tapX>${RESET}         Delete a TAP interface"
  echo
  echo -e "${YELLOW}Internet Mode:${RESET}"
  echo -e "  ${CYAN}net-isolate <tapX>${RESET}        Give VM internet (NAT) but no host access"
  echo -e "  ${CYAN}net-reset <tapX>${RESET}          Remove isolation/NAT rules for TAP"
  echo
  echo -e "${YELLOW}General:${RESET}"
  echo -e "  ${CYAN}help${RESET}                      Show this help menu"
  echo
  author_info
}

# ========= LAN MANAGEMENT =========

create_lan() {
  local lan=$1
  local br="br-$lan"

  if ip link show "$br" &>/dev/null; then
    echo -e "${RED}LAN $lan already exists.${RESET}"
    exit 1
  fi

  sudo ip link add name "$br" type bridge
  sudo ip link set "$br" up

  echo -e "${GREEN}LAN $lan created with bridge $br.${RESET}"
}

delete_lan() {
  local lan=$1
  local br="br-$lan"

  if ! ip link show "$br" &>/dev/null; then
    echo -e "${RED}LAN $lan does not exist.${RESET}"
    exit 1
  fi

  sudo ip link set "$br" down
  sudo ip link delete "$br" type bridge
  rm -f "$NET_DIR/$lan.config"

  echo -e "${GREEN}LAN $lan deleted.${RESET}"
}

list_lans() {
  echo -e "${MAGENTA}${BOLD}Available Virtual LANs:${RESET}"
  for cfg in "$NET_DIR"/*.config; do
    [ -e "$cfg" ] || { echo "  (none)"; return; }
    lan=$(basename "$cfg" .config)
    echo "  - $lan"
  done
}

attach_tap() {
  local lan=$1
  local tap=$2
  local br="br-$lan"

  if ! ip link show "$br" &>/dev/null; then
    echo -e "${RED}LAN $lan does not exist.${RESET}"
    exit 1
  fi

  sudo ip link set "$tap" master "$br"
  sudo ip link set "$tap" up

  echo -e "${GREEN}Attached $tap to LAN $lan.${RESET}"
}

detach_tap() {
  local lan=$1
  local tap=$2
  local br="br-$lan"

  sudo ip link set "$tap" nomaster
  sudo ip link set "$tap" down

  echo -e "${GREEN}Detached $tap from LAN $lan.${RESET}"
}

save_lan() {
  local lan=$1
  local br="br-$lan"
  local cfg="$NET_DIR/$lan.config"

  if ! ip link show "$br" &>/dev/null; then
    echo -e "${RED}LAN $lan does not exist.${RESET}"
    exit 1
  fi

  {
    echo "BRIDGE=$br"
    for tap in $(bridge link show | awk '/master '"$br"'/ {print $2}'); do
      echo "TAP=$tap"
    done
  } > "$cfg"

  echo -e "${GREEN}LAN $lan with TAPs saved to $cfg.${RESET}"
}

restore_lan() {
  local lan=$1
  local cfg="$NET_DIR/$lan.config"

  if [ ! -f "$cfg" ]; then
    echo -e "${RED}Config for LAN $lan not found.${RESET}"
    exit 1
  fi

  local br=""
  local taps=()

  while IFS= read -r line; do
    case "$line" in
      BRIDGE=*) br="${line#BRIDGE=}" ;;
      TAP=*) taps+=("${line#TAP=}") ;;
    esac
  done < "$cfg"

  if ! ip link show "$br" &>/dev/null; then
    sudo ip link add name "$br" type bridge
    sudo ip link set "$br" up
    echo -e "${GREEN}Bridge $br restored.${RESET}"
  else
    echo -e "${YELLOW}Bridge $br already exists, skipping creation.${RESET}"
  fi

  for tap in "${taps[@]}"; do
    if ! ip link show "$tap" &>/dev/null; then
      sudo ip tuntap add dev "$tap" mode tap user "$USER"
      echo -e "${GREEN}Restored TAP $tap.${RESET}"
    fi
    sudo ip link set "$tap" master "$br"
    sudo ip link set "$tap" up
    echo -e "${GREEN}Attached TAP $tap to $br.${RESET}"
  done

  echo -e "${GREEN}LAN $lan fully restored with TAPs.${RESET}"
}

# ========= TAP MANAGEMENT =========

tap_create() {
  local tap=$1
  if [ -z "$tap" ]; then
    echo -e "${RED}Usage: qemu-netctl tap-create <tapX>${RESET}"
    exit 1
  fi

  if ip link show "$tap" &>/dev/null; then
    echo -e "${RED}TAP $tap already exists.${RESET}"
    exit 1
  fi

  sudo ip tuntap add dev "$tap" mode tap user "$USER"
  sudo ip link set "$tap" up

  echo -e "${GREEN}TAP $tap created and set up.${RESET}"
}

tap_delete() {
  local tap=$1
  if [ -z "$tap" ]; then
    echo -e "${RED}Usage: qemu-netctl tap-delete <tapX>${RESET}"
    exit 1
  fi

  if ! ip link show "$tap" &>/dev/null; then
    echo -e "${RED}TAP $tap does not exist.${RESET}"
    exit 1
  fi

  sudo ip link set "$tap" down
  sudo ip tuntap del dev "$tap" mode tap

  echo -e "${GREEN}TAP $tap deleted.${RESET}"
}

# ========= ISOLATED INTERNET MODE =========

net_isolate() {
  local tap=$1
  if [ -z "$tap" ]; then
    echo -e "${RED}Usage: qemu-netctl net-isolate <tapX>${RESET}"
    exit 1
  fi

  # give tap an IP for NAT only
  sudo ip addr add 10.200.0.1/24 dev "$tap" || true
  sudo ip link set "$tap" up

  # enable forwarding
  sudo sysctl -w net.ipv4.ip_forward=1 >/dev/null

  # NAT for VM → internet
  sudo iptables -t nat -A POSTROUTING -s $VM_NET -o $UPLINK_IF -j MASQUERADE

  # block host ↔ VM direct traffic
  sudo iptables -A INPUT -i "$tap" -j DROP
  sudo iptables -A FORWARD -i "$tap" -o "$tap" -j DROP

  echo -e "${GREEN}Isolated internet mode enabled for $tap (VM has internet, no host access).${RESET}"
}

net_reset() {
  local tap=$1
  if [ -z "$tap" ]; then
    echo -e "${RED}Usage: qemu-netctl net-reset <tapX>${RESET}"
    exit 1
  fi

  # remove IP
  sudo ip addr flush dev "$tap"

  # remove iptables rules
  sudo iptables -t nat -D POSTROUTING -s $VM_NET -o $UPLINK_IF -j MASQUERADE 2>/dev/null || true
  sudo iptables -D INPUT -i "$tap" -j DROP 2>/dev/null || true
  sudo iptables -D FORWARD -i "$tap" -o "$tap" -j DROP 2>/dev/null || true

  echo -e "${GREEN}Isolation/NAT removed for $tap.${RESET}"
}

# ========= MAIN =========

cmd=$1
shift || true

case "$cmd" in
  create) create_lan "$@" ;;
  delete) delete_lan "$@" ;;
  list) list_lans ;;
  attach) attach_tap "$@" ;;
  detach) detach_tap "$@" ;;
  save) save_lan "$@" ;;
  restore) restore_lan "$@" ;;
  tap-create) tap_create "$@" ;;
  tap-delete) tap_delete "$@" ;;
  net-isolate) net_isolate "$@" ;;
  net-reset) net_reset "$@" ;;
  help|--help|-h|"") usage ;;
  *) echo -e "${RED}Unknown command: $cmd${RESET}"; usage; exit 1 ;;
esac
